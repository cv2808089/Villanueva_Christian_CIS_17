/* 
 * File:   main.cpp
 * Author: Christian Villanueva
 * Created on 9/14/20 at 6:57pm
 * Purpose:  Input something, output it reversed with some modifications
 * Note:Range should be 5 digits, 321 = 00321 reverse = 12300 before subtraction
 *      12300 - 999 = 11301 after subtraction
 *      12300 = 00321 = 321 after reversal and no subtraction
 */

//System Libraries Here
#include <iostream>//cin,cout,endl
#include <cstring> //strlen()
using namespace std;
//User Libraries Here

//Global Constants Only, No Global Variables
//Like PI, e, Gravity, or conversions

//Function Prototypes Here
bool  inRange(const char [],unsigned short &);//Output true,unsigned or false
bool  reverse(unsigned short,signed short &);//Output true,short or false
short subtrct(signed short,int);

//Program Execution Begins Here
int main(int argc, char** argv) {
    //Declare all Variables Here
    const int SIZE=80;     //More than enough
    char  digits[SIZE];    //Character digits or not
    unsigned short unShort;//Unsigned short
    short snShort;         //Signed short
    
    //Input or initialize values Here
    cout<<"Reverse a number and subtract if possible."<<endl;
    cout<<"Input a number in the range of an unsigned short"<<endl;
    cin>>digits;
    
    //Test if it is in the Range of an unsigned short
    if(!inRange(digits,unShort)){
        cout<<"No Conversion Possible"<<endl;
        return 0;
    }
    
    //Reverse and see if it falls in the range of an signed short
    if(!reverse(unShort,snShort)){
        cout<<"No Conversion Possible"<<endl;
        return 0;
    }
    
    //Now subtract if the result is not negative else don't subtract
    snShort=subtrct(snShort,999);
    
    //Output the result
    cout<<snShort<<endl;
    
    //Exit
    return 0;
}

bool  inRange(const char arr[], unsigned short & num)//Output true,unsigned or false
{
    int size = strlen(arr);
    //range = 32767
    int x = atoi(arr);
    for(int i = 0; i < size; i++)
        if(!isdigit(arr[i]))
            return false;
    if(x <= 65535 && x >= 0)
    {
        num = x;
        return true;
    }
    else
        return false;
    
}
bool  reverse(unsigned short unum, signed short & sig)//Output true,short or false
{
    int snum = 0;
    unsigned short cu = unum;
    int rem;
    
     while(unum != 0) {
        rem = unum%10;
        snum = snum*10 + rem;
        unum /= 10;
    }

    if(snum <=9 && snum >= -9 && cu <= 9 && cu >= -9)
        snum = snum*10000;
    if(snum <=99 && snum >= -99 && cu <= 99 && cu >= -99)
        snum = snum*1000;
    if(snum <=999 && snum >= -999 && cu <= 999 && cu >= -999)
        snum = snum*100;
    if(snum <= 9999 && snum > 999 && cu <= 9999 && cu >= 999)
        snum = snum*10;
    if(snum >= -9999 && snum < -999 && cu >= -9999 && cu <= -999)
        snum = snum*10;

    if(snum >= -32767 && snum <= 32767)
    {
        sig = snum;
        return true;
    }
    else
        return false;
}
    
short subtrct(signed short snum,int n)
{
    signed short sh = snum;
    sh = sh - 999;
    if(sh > 0)
        return snum-999;
    else
        return snum;
}